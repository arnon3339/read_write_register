{
    "name": "offload",
    "description": "Offloading data from alpide_data modules, and stores them in AXI Stream FIFO for offloading. The module selects a alpide_data module for offloading based on the number of words stored in the alpide_data buffer FIFO. The module supports two modes: frame-based, and non-frame based. Frame-based mode will read an entire frame from an alpide_data module before evaluating to read from another, even though not a full frame is yet store in the selected alpide_data module. This may be less efficient (as the ALPIDE data stream might contain gaps), but the resulting data do not mix between frames from different ALPIDE chips. The non-frame mode will read a constant number of words from the alpide_data module based. Tlast functionality is added to support DMA usage.",
    "bus": {
        "type": "axi",
        "addr_width": 32,
        "data_width": 32,
        "reset": "async",
        "comp_library": "axi"
    },
    "baseaddr": "0x20001000",
    "register": [
        {
            "name": "enable_offload",
            "mode": "rw",
            "type": "sl",
            "address": "0x0",
            "reset": "0x0",
            "description": "Enable offload state machine. If unasserted, no data is read out from ALPIDE_DATA buffer FIFOs."
        },
        {
            "name": "reset_offload_fifo",
            "mode": "pulse",
            "num_cycles": 10,
            "type": "sl",
            "address": "0x4",
            "reset": "0x0",
            "description": "Resets the offload FIFO. Also resets num_wait counter."
        },
        {
            "name": "frame_based_offload",
            "mode": "rw",
            "type": "sl",
            "address": "0x8",
            "reset": "0x1",
            "description": "If enabled, the offload module will read a complete frame from an ALPIDE_DATA module buffer FIFO before reading from another ALPIDE_DATA module. Somewhat reduced efficiency (depending on gaps in ALPIDE chip data stream), but ensures that no data is mixed between ALPIDE chips. However, mixed frames may be separated from each other in software, because of the pRU data format structure."
        },
        {
            "name": "idle",
            "mode": "ro",
            "type": "sl",
            "address": "0xc",
            "reset": "0x0",
            "description": "Is low whenever there are more data to transmit from alpide_data modules to offload buffer."
        },
        {
            "name": "pDTP_TX_status",
            "mode": "ro",
            "type": "fields",
            "address": "0x10",
            "fields": [
                {
                    "name": "idle",
                    "type": "sl",
                    "description": "pDTP TX Module is idle."
                },
                {
                    "name": "busy_stream",
                    "type": "sl",
                    "description": "pDTP TX Module is transmitting stream."
                },
                {
                    "name": "busy_data",
                    "type": "sl",
                    "description": "pDTP TX Module is transmitting data."
                },
                {
                    "name": "complete",
                    "type": "sl",
                    "description": "pDTP TX Module has completed previous task."
                },
                {
                    "name": "throttle_value",
                    "type": "slv",
                    "length": 24,
                    "description": "Current throttle value."
                }
            ],
            "description": "Test offload by filling FIFO with counter value."
        },
        {
            "name": "test_mode",
            "mode": "rw",
            "type": "fields",
            "address": "0x14",
            "fields": [
                {
                    "name": "enable_test_mode",
                    "type": "sl",
                    "description": "Enable test mode."
                },
                {
                    "name": "test_word_interval",
                    "type": "slv",
                    "length": 31,
                    "description": "The clock cycle interval between each test word. 0 gives 128bit x 120MHz, 1 gives 128bit x 60MHz, 2 gives 128 x 40 MHz, etc."
                }
            ],
            "description": "Test offload by filling FIFO with counter value."
        },
        {
            "name": "num_test_words",
            "mode": "rw",
            "type": "default",
            "address": "0x18",
            "reset": "0x400",
            "description": "Number of words to be stored in offload FIFO in test mode. Last word is written with tlast."
        },
        {
            "name": "num_wait",
            "mode": "ro",
            "type": "default",
            "address": "0x1c",
            "reset": "0x0",
            "description": "Number of clock cycles waiting for FIFO to have space for writing."
        },
        {
            "name": "tlast_threshold",
            "mode": "rw",
            "type": "default",
            "address": "0x20",
            "reset": "0xffff",
            "description": "Note: deprecated for all HW except PTB. Threshold for number of 128 bit words written to FIFO before tlast is asserted. This number must be smaller than the DMA length register value to avoid DMA error."
        },
        {
            "name": "assert_tlast_when_empty",
            "mode": "rw",
            "type": "sl",
            "address": "0x24",
            "reset": "0x0",
            "description": "Note: deprecated for all HW except PTB. Assert TLAST when the last word is read out of the FIFO. This causes the DMA to assert an IRQ, and ensures that no data is lost in the buffer. Can be replaced by flush_buffer assertion. Note: deprecated for all HW except PTB."
        },
        {
            "name": "flush_buffer",
            "mode": "pulse",
            "num_cycles": 1,
            "type": "sl",
            "address": "0x28",
            "reset": "0x0",
            "description": "Note: deprecated for all HW except PTB. Causes a delimiter word (all ones) to be written to the output buffer FIFO with TLAST asserted. Will provoke the DMA to assert an IRQ so the transfer is fulfilled. Can be used instead of assert_tlast_when_empty register. Note: deprecated for all HW except PTB."
        }
    ]
}